{
  "name": "password-hash-and-salt",
  "version": "0.1.2",
  "description": "Simple, safe and straight-forward password hashing / salting for node.js",
  "main": "index.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/florianheinemann/password-hash-and-salt.git"
  },
  "keywords": [
    "crypto",
    "node.js",
    "node",
    "hash",
    "salt",
    "password",
    "pbkdf2"
  ],
  "dependencies": {},
  "devDependencies": {
    "grunt": "~0.4.4",
    "mocha": "~1.18.2",
    "chai": "~1.9.1",
    "grunt-mocha-test": "~0.10.2"
  },
  "author": {
    "name": "Florian Heinemann",
    "email": "florian.heinemann@gmail.com",
    "url": "http://twitter.com/florian__h"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/florianheinemann/password-hash-and-salt/issues"
  },
  "homepage": "https://github.com/florianheinemann/password-hash-and-salt",
  "readme": "password-hash-and-salt\n======================\n\nThis module provides straight-forward password hashing for node.js applications using default settings considered to be safe.\n\n### Usage\n\nFirst, install the module:\n\n`$ npm install password-hash-and-salt --save`\n\nAfterwards, usage is simple as shown in the following example:\n```javascript\nvar password = require('password-hash-and-salt');\n\nvar myuser = [];\n\n// Creating hash and salt\npassword('mysecret').hash(function(error, hash) {\n\tif(error)\n\t\tthrow new Error('Something went wrong!');\n\n\t// Store hash (incl. algorithm, iterations, and salt)\n\tmyuser.hash = hash;\n\n\t// Verifying a hash\n\tpassword('hack').verifyAgainst(myuser.hash, function(error, verified) {\n\t\tif(error)\n\t\t\tthrow new Error('Something went wrong!');\n\t\tif(!verified) {\n\t\t\tconsole.log(\"Don't try! We got you!\");\n\t\t} else {\n\t\t\tconsole.log(\"The secret is...\");\n\t\t}\n\t});\n})\n\n```\n\n### Crypto\npassword-hash-and-salt uses node.js' internal crypto module. Hashes are generated with pbkdf2 using 10,000 iterations.\n\n### Created hash\nThe created hash is of the following format:\n`pbkdf2$10000$hash$salt`\n\nThis allows for future upgrades of the algorithm and/or increased number of iterations in future version. It also simplifies storage as no dedicated database field for the salt is required.\n\n### License\n\n[MIT License](http://opensource.org/licenses/MIT)\n\n### Author\nFlorian Heinemann [http://twitter.com/florian__h/](http://twitter.com/florian__h/)\n",
  "readmeFilename": "README.md",
  "_id": "password-hash-and-salt@0.1.2",
  "_from": "password-hash-and-salt"
}
